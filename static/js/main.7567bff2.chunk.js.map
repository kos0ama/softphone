{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","useState","gcallId","setgcallId","gparticipantId","setgparticipantId","gstate","setgstate","gpresence","setgpresence","gmuted","setgmuted","gheld","setgheld","gconversationList","setgconversationList","refinputnumber","useRef","refparticipantnumber","unlessCond","gisconnected","setgisconnected","muted","setmuted","held","setheld","isConsult","setisConsult","valinputnumber","setvalinputnumber","valparticipantnumber","setvalparticipantnumber","localState","Date","getTime","redirectUri","window","location","href","client","platformClient","ApiClient","instance","conversationsApi","ConversationsApi","notificationsApi","NotificationsApi","usersApi","UsersApi","setEnvironment","setPersistSettings","me","conversationsTopic","stationTopic","presenceTopic","routingStatusTopic","notificationChannel","conversationList","handleNotification","message","notification","JSON","parse","data","topicName","toLowerCase","console","info","debug","eventBody","id","participants","calls","state","forEach","participant","length","ani","self","addressNormalized","attributes","additionalProperties","confined","direction","dnis","other","provider","recording","recordingState","userId","user","selfUri","peerId","peer","conversation","isConnected","some","isConversationDisconnected","presenceDefinition","systemPresence","warn","useEffect","loginImplicitGrant","then","res","log","getUsersMe","postNotificationsChannels","channel","WebSocket","connectUri","onmessage","body","putNotificationsChannelSubscriptions","catch","response","callId","participantId","patchConversationsCallParticipant","err","error","disconnect","currentMuteState","mute","currentHoldState","hold","speakTo","destination","address","postConversationsCallParticipantConsult","startConsult","className","Input","type","placeholder","ref","val","onChange","e","target","value","Button","inverted","color","onClick","current","focus","phoneNumber","postConversationsCalls","MakeCall","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7567bff2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component, useCallback } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport { useState, useEffect, useRef } from 'react';\nimport { Button, Input, Label } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\n\n/* This requires that the react app's config be \"ejected\" and set resolve.mainFields to\n * ['jsnext:main', 'browser', 'module', 'main']\n * This tells webpack to look for the jsnext:main entry point first and use the ES6 classes in the SDK\n */\nimport platformClient from 'purecloud-platform-client-v2';\n\nconst App = () => {\n\tconst [gcallId, setgcallId] = useState([]);\n\tconst [gparticipantId, setgparticipantId] = useState([]);\n\tconst [gdnis, setgdnis] = useState([]);\n\tconst [gani, setgani] = useState([]);\n\tconst [gstate, setgstate] = useState([]);\n\tconst [gpresence, setgpresence] = useState([]);\n\tconst [gdirection, setgdirection] = useState([]);\n\tconst [gmuted, setgmuted] = useState(false);\n\tconst [gheld, setgheld] = useState(false);\n\tconst [gconversationList, setgconversationList] = useState([{}]);\n\n\tconst refinputnumber = useRef(null);\n\tconst refparticipantnumber = useRef(null);\n\tconst [unlessCond, setunlessCond] = useState(false);\n\n\tconst [gisconnected, setgisconnected] = useState(false);\n\tconst [muted, setmuted] = useState(false);\n\tconst [held, setheld] = useState(false);\n\tconst [isConsult, setisConsult] = useState(false);\n\n\tconst [valinputnumber, setvalinputnumber] = useState('');\n\tconst handleChange = (e) => setvalinputnumber(e.target.value);\n\tconst [valparticipantnumber, setvalparticipantnumber] = useState('');\n\tconst handleChange2 = (e) => setvalparticipantnumber(e.target.value);\n\n\tconst localState = new Date().getTime();\n\t//console.log(`state=${localState}`);\n\n\tconst clientId = 'd03eb90b-4753-4144-be08-da2890cfa679'; //ama_implicit トークンの暗黙的な付与（ブラウザー\n\tconst redirectUri = window.location.href;\n\tconst client = platformClient.ApiClient.instance;\n\tconst conversationsApi = new platformClient.ConversationsApi();\n\tconst notificationsApi = new platformClient.NotificationsApi();\n\tconst usersApi = new platformClient.UsersApi();\n\t// Set Genesys Cloud settings\n\tclient.setEnvironment('mypurecloud.jp');\n\tclient.setPersistSettings(true, 'test_app');\n\n\t// Set local vars\n\tlet CONVERSATION_LIST_TEMPLATE = null;\n\tlet conversationList = {};\n\tlet me,\n\t\twebSocket,\n\t\tconversationsTopic,\n\t\tstationTopic,\n\t\tpresenceTopic,\n\t\troutingStatusTopic,\n\t\tnotificationChannel;\n\n\tuseEffect(() => {\n\t\tclient\n\t\t\t.loginImplicitGrant(clientId, redirectUri, { state: localState })\n\t\t\t.then((res) => {\n\t\t\t\tconsole.log('Logged in');\n\t\t\t\t//console.log(res);\n\t\t\t\t//console.log(\n\t\t\t\t//\tres.state === localState\n\t\t\t\t//\t\t? 'State match'\n\t\t\t\t//\t\t: `Different state: ${res.state}`\n\t\t\t\t//);\n\n\t\t\t\t// Get authenticated user's info\n\t\t\t\treturn usersApi.getUsersMe();\n\t\t\t})\n\t\t\t.then((res) => {\n\t\t\t\tconsole.log('userMe: ', res);\n\t\t\t\tme = res;\n\n\t\t\t\t// Create notification channel\n\t\t\t\treturn notificationsApi.postNotificationsChannels();\n\t\t\t})\n\t\t\t.then((channel) => {\n\t\t\t\tconsole.log('channel: ', channel);\n\t\t\t\tnotificationChannel = channel;\n\n\t\t\t\t// Set up web socket\n\t\t\t\twebSocket = new WebSocket(notificationChannel.connectUri);\n\t\t\t\twebSocket.onmessage = handleNotification;\n\n\t\t\t\t// Subscribe to authenticated user's conversations\n\t\t\t\tconversationsTopic = 'v2.users.' + me.id + '.conversations';\n\t\t\t\tstationTopic = 'v2.users.' + me.id + '.station';\n\t\t\t\tpresenceTopic = 'v2.users.' + me.id + '.presence';\n\t\t\t\troutingStatusTopic = 'v2.users.' + me.id + '.routingStatus';\n\t\t\t\t//const body2 = [{ id: conversationsTopic }];\n\t\t\t\tconst body = [\n\t\t\t\t\t{ id: conversationsTopic },\n\t\t\t\t\t{ id: stationTopic },\n\t\t\t\t\t{ id: presenceTopic },\n\t\t\t\t\t{ id: routingStatusTopic },\n\t\t\t\t];\n\t\t\t\treturn notificationsApi.putNotificationsChannelSubscriptions(\n\t\t\t\t\tnotificationChannel.id,\n\t\t\t\t\tbody\n\t\t\t\t);\n\t\t\t})\n\t\t\t.catch(function (response) {\n\t\t\t\tconsole.log(response);\n\t\t\t});\n\t}, []); // Only 1 time.\n\n\tuseEffect(() => {\n\t\tconsole.debug('MainHeaderでuseEffect[unlessCond]が実行されました');\n\t}, [unlessCond]); // Update if authState changes\n\n\tuseEffect(() => {\n\t\tconsole.debug('MainHeaderでuseEffect[gisconnected]が実行されました');\n\t\t//console.log(unlessCond);\n\t\tdisconnect(gcallId, gparticipantId);\n\t}, [gisconnected]); // Update if authState changes\n\n\tuseEffect(() => {\n\t\tconsole.debug('MainHeaderでuseEffect[muted]が実行されました');\n\t\t//console.log(muted);\n\t\tmute(gcallId, gparticipantId, gmuted);\n\t}, [muted]); // Update if authState changes\n\n\tuseEffect(() => {\n\t\tconsole.debug('MainHeaderでuseEffect[held]が実行されました');\n\t\t//console.log(held);\n\t\thold(gcallId, gparticipantId, gheld);\n\t}, [held]); // Update if authState changes\n\n\tuseEffect(() => {\n\t\tconsole.debug('MainHeaderでuseEffect[isConsult]が実行されました');\n\t\t//console.log(isConsult);\n\t\tstartConsult();\n\t}, [isConsult]); // Update if authState changes\n\n\tuseEffect(() => {\n\t\tconsole.debug('MainHeaderでuseEffect[gconversationList]が実行されました');\n\t\tconsole.log(gconversationList);\n\t}, [gconversationList]); // Update if authState changes\n\t//===================================================================================\n\t// FROM GENESYS\n\t//===================================================================================\n\t// Handle Websocket Function\n\tfunction handleNotification(message) {\n\t\t// Parse notification string to a JSON object\n\t\tconst notification = JSON.parse(message.data);\n\n\t\tswitch (notification.topicName.toLowerCase()) {\n\t\t\tcase 'channel.metadata':\n\t\t\t\t// Heartbeat  Discard unwanted notifications\n\t\t\t\tconsole.info('Ignoring metadata: ', notification);\n\t\t\t\treturn;\n\t\t\tcase conversationsTopic.toLowerCase():\n\t\t\t\t// Conversations\n\t\t\t\tconsole.debug('Conversation notification: ', notification);\n\t\t\t\t//--------------------\n\t\t\t\t// react state に　Copy\n\t\t\t\t//--------------------\n\t\t\t\tsetgcallId(notification.eventBody.id);\n\t\t\t\tconsole.debug('gcallId:', notification.eventBody.id);\n\t\t\t\tsetgparticipantId(notification.eventBody.participants[0].id);\n\t\t\t\tconsole.debug(\n\t\t\t\t\t'gparticipantId:',\n\t\t\t\t\tnotification.eventBody.participants[0].id\n\t\t\t\t);\n\t\t\t\tsetgheld(notification.eventBody.participants[0].calls[0].held);\n\t\t\t\tconsole.debug(\n\t\t\t\t\t'gheld:',\n\t\t\t\t\tnotification.eventBody.participants[0].calls[0].held\n\t\t\t\t);\n\t\t\t\tsetgmuted(notification.eventBody.participants[0].calls[0].muted);\n\t\t\t\tconsole.debug(\n\t\t\t\t\t'gmuted:',\n\t\t\t\t\tnotification.eventBody.participants[0].calls[0].muted\n\t\t\t\t);\n\t\t\t\t// React へ　setState\n\t\t\t\t//setgdnis(notification.eventBody.participants[0].dnis);\n\t\t\t\t//setgani(notification.eventBody.participants[0].ani);\n\t\t\t\tsetgstate(notification.eventBody.participants[0].calls[0].state);\n\t\t\t\t//setgdirection(notification.eventBody.participants[0].calls[0].direction);\n\n\t\t\t\t// See function description for explanation\n\n\t\t\t\tcopyCallPropsToParticipant(notification.eventBody);\n\n\t\t\t\t// Update conversation in list or remove it if disconnected\n\t\t\t\tif (isConversationDisconnected(notification.eventBody)) {\n\t\t\t\t\tdelete conversationList[notification.eventBody.id];\n\t\t\t\t} else {\n\t\t\t\t\tconversationList[notification.eventBody.id] = notification.eventBody;\n\t\t\t\t\tsetgconversationList(notification.eventBody);\n\t\t\t\t}\n\t\t\t\treturn;\n\n\t\t\tcase routingStatusTopic.toLowerCase():\n\t\t\t\t// RoutingStatus\n\t\t\t\tconsole.debug('routingStatus notification: ', notification);\n\t\t\t\treturn;\n\t\t\tcase presenceTopic.toLowerCase():\n\t\t\t\t// RoutingStatus\n\t\t\t\tconsole.debug('presence notification: ', notification);\n\t\t\t\tsetgpresence(notification.eventBody.presenceDefinition.systemPresence);\n\t\t\t\treturn;\n\t\t\tdefault:\n\t\t\t\t// Unexpected topic\n\t\t\t\tconsole.warn('Unknown notification: ', notification);\n\t\t\t\treturn;\n\t\t}\n\t}\n\n\t/* This function copies properties from the participant's call object in a notification to the\n\t * participant object to make the participant object look the same as the response from the\n\t * conversations APIs. This isn't strictly necessary, but is helpful to maintain a consistent structure.\n\t */\n\tfunction copyCallPropsToParticipant(conversation) {\n\t\tconversation.participants.forEach((participant) => {\n\t\t\tif (!participant.calls || participant.calls.length === 0) return;\n\n\t\t\tparticipant.ani = participant.calls[0].self.addressNormalized;\n\t\t\tparticipant.attributes = participant.additionalProperties;\n\t\t\tparticipant.confined = participant.calls[0].confined;\n\t\t\tparticipant.direction = participant.calls[0].direction;\n\t\t\tparticipant.dnis = participant.calls[0].other.addressNormalized;\n\t\t\tparticipant.held = participant.calls[0].held;\n\t\t\tparticipant.muted = participant.calls[0].muted;\n\t\t\tparticipant.provider = participant.calls[0].provider;\n\t\t\tparticipant.recording = participant.calls[0].recording;\n\t\t\tparticipant.recordingState = participant.calls[0].recordingState;\n\t\t\tparticipant.state = participant.calls[0].state;\n\n\t\t\tif (participant.userId)\n\t\t\t\tparticipant.user = {\n\t\t\t\t\tid: participant.userId,\n\t\t\t\t\tselfUri: `/api/v2/users/${participant.userId}`,\n\t\t\t\t};\n\t\t\tif (participant.calls[0].peerId)\n\t\t\t\tparticipant.peer = participant.calls[0].peerId;\n\t\t});\n\t}\n\n\t// Determines if a conversation is disconnected by checking to see if all participants are disconnected\n\tfunction isConversationDisconnected(conversation) {\n\t\tlet isConnected = false;\n\t\tconversation.participants.some((participant) => {\n\t\t\tif (participant.state !== 'disconnected') {\n\t\t\t\tisConnected = true;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\n\t\treturn !isConnected;\n\t}\n\n\t// Mute participant\n\tfunction mute(callId, participantId, currentMuteState) {\n\t\t// Create request body, only set desired properties\n\t\tlet body = {\n\t\t\tmuted: !currentMuteState,\n\t\t};\n\n\t\t// Invoke API\n\t\tconversationsApi\n\t\t\t.patchConversationsCallParticipant(callId, participantId, body)\n\t\t\t.then(() => {\n\t\t\t\t// Result will be empty here\n\t\t\t})\n\t\t\t.catch((err) => console.error(err));\n\t}\n\n\t// Hold participant\n\tfunction hold(callId, participantId, currentHoldState) {\n\t\t// Create request body, only set desired properties\n\t\tlet body = {\n\t\t\theld: !currentHoldState,\n\t\t};\n\n\t\t// Invoke API\n\t\tconversationsApi\n\t\t\t.patchConversationsCallParticipant(callId, participantId, body)\n\t\t\t.then(() => {\n\t\t\t\t// Result will be empty here\n\t\t\t})\n\t\t\t.catch((err) => console.error(err));\n\t}\n\n\t// Disconnect participant\n\tfunction disconnect(callId, participantId) {\n\t\t// Create request body, only set desired properties\n\t\tlet body = {\n\t\t\tstate: 'disconnected',\n\t\t};\n\n\t\t// Invoke API\n\t\tconversationsApi\n\t\t\t.patchConversationsCallParticipant(callId, participantId, body)\n\t\t\t.then(() => {\n\t\t\t\t// Result will be empty here\n\t\t\t})\n\t\t\t.catch((err) => console.error(err));\n\t}\n\n\t// Initiate a consult transfer\n\tfunction startConsult() {\n\t\t//console.debug(conversationList);\n\t\tconsole.debug(gconversationList);\n\t\t//let callId = conversationList[Object.keys(conversationList)[0]].id;\n\t\t//let callId = gconversationList.id;\n\t\tlet callId = gcallId;\n\t\t// Grab the first participant, which should be the party we dialed for an outbound call\n\t\t//let participantId = conversationList[callId].participants[1].id;\n\t\tlet participantId = gparticipantId;\n\n\t\t// Create request body\n\t\tlet body = {\n\t\t\tspeakTo: 'destination',\n\t\t\tdestination: {\n\t\t\t\t//address: $('input#newparticipant').val(),\n\t\t\t\taddress: valparticipantnumber,\n\t\t\t},\n\t\t};\n\t\t// Invoke API\n\t\tconversationsApi\n\t\t\t.postConversationsCallParticipantConsult(callId, participantId, body)\n\t\t\t.then(() => {\n\t\t\t\t//$('input#newparticipant').val('');\n\t\t\t\t// We can ignore the response in this tutorial.\n\t\t\t})\n\t\t\t.catch((err) => console.error(err));\n\t}\n\n\t// Change which parties in the consult transfer are speaking\n\tfunction consultSpeakTo(speakTo) {\n\t\t//let callId = conversationList[Object.keys(conversationList)[0]].id;\n\t\tlet callId = gcallId;\n\n\t\t//grab the first participant, which should be the party we dialed for an outbound call\n\t\t//let participantId = conversationList[callId].participants[1].id;\n\t\tlet participantId = gparticipantId;\n\n\t\t// Create request body\n\t\tlet body = {\n\t\t\tspeakTo: speakTo,\n\t\t};\n\n\t\t// Invoke API\n\t\tconversationsApi\n\t\t\t.patchConversationsCallParticipantConsult(callId, participantId, body)\n\t\t\t.then(() => {\n\t\t\t\t// We can ignore the response in this tutorial.\n\t\t\t})\n\t\t\t.catch((err) => console.error(err));\n\t}\n\n\t//======================================\n\tconst MakeCall = () => {\n\t\tsetgisconnected(true);\n\t\trefinputnumber.current.focus();\n\t\t// Create request body\n\t\tlet body = {\n\t\t\tphoneNumber: valinputnumber,\n\t\t};\n\n\t\t// Invoke API\n\t\tconsole.log(body);\n\t\tconversationsApi\n\t\t\t.postConversationsCalls(body)\n\t\t\t.then(() => {})\n\t\t\t.catch((err) => console.error(err));\n\t};\n\n\t//-------------------------\n\n\t//-------------------------\n\n\t//-------------------------\n\t/*\n\tgdnis is {gdnis} / gani is {gani} / gstate is {gstate} / gdirection is{' '}\n\t{gdirection} /gisconnected is {gisconnected.toString()} / gcallId is{' '}\n\t{gcallId} / gparticipantId is {gparticipantId} / gmuted is{' '}\n\t{gmuted.toString()} / gheld is {gheld.toString()} / unlessCond :{' '}\n\t{unlessCond.toString()} / muted: {muted.toString()} / held:{' '}\n\t{held.toString()} / isConsult: {isConsult.toString()}\n\t*/\n\t//-------------------------\n\n\treturn (\n\t\t<div className=\"ui grid\">\n\t\t\t<div className=\"ten wide column\">\n\t\t\t\t<div className=\"ui divided selection list\">\n\t\t\t\t\t<a className=\"item\">\n\t\t\t\t\t\t<div className=\"ui large green horizontal label\">Info1 </div>\n\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tid=\"dialstring\"\n\t\t\t\t\t\t\tplaceholder=\"3172222222\"\n\t\t\t\t\t\t\tref={refinputnumber}\n\t\t\t\t\t\t\tval={valinputnumber}\n\t\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{gisconnected === false && (\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tinverted\n\t\t\t\t\t\t\t\tcolor=\"green\"\n\t\t\t\t\t\t\t\tid=\"dial\"\n\t\t\t\t\t\t\t\tonClick={() => MakeCall()}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tDial\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{gisconnected === true && (\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tinverted\n\t\t\t\t\t\t\t\tcolor=\"red\"\n\t\t\t\t\t\t\t\tonClick={() => setgisconnected(false)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tDisconnect\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{gisconnected === true && muted === false && (\n\t\t\t\t\t\t\t<Button inverted color=\"green\" onClick={() => setmuted(true)}>\n\t\t\t\t\t\t\t\tMute\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{gisconnected === true && muted === true && (\n\t\t\t\t\t\t\t<Button inverted color=\"blue\" onClick={() => setmuted(false)}>\n\t\t\t\t\t\t\t\tunMute\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{gisconnected === true && held === false && (\n\t\t\t\t\t\t\t<Button inverted color=\"green\" onClick={() => setheld(true)}>\n\t\t\t\t\t\t\t\tHold\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{gisconnected === true && held === true && (\n\t\t\t\t\t\t\t<Button inverted color=\"blue\" onClick={() => setheld(false)}>\n\t\t\t\t\t\t\t\tunHold\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{valinputnumber}\n\t\t\t\t\t\t{gstate === 'disconnected' && (\n\t\t\t\t\t\t\t<div className=\"ui mini black circular label\">{gstate}</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{gstate === 'terminated' && (\n\t\t\t\t\t\t\t<div className=\"ui mini grey circular label\">{gstate}</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{gstate === 'dialing' && (\n\t\t\t\t\t\t\t<div className=\"ui mini red circular label\">{gstate}</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{gstate === 'connected' && (\n\t\t\t\t\t\t\t<div className=\"ui mini blue circular label\">{gstate}</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{gpresence === 'AVAILABLE' && (\n\t\t\t\t\t\t\t<div className=\"ui mini green circular label\">{gpresence}</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{gpresence === 'BUSY' && (\n\t\t\t\t\t\t\t<div className=\"ui mini red circular label\">{gpresence}</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{gpresence === 'AWAY' && (\n\t\t\t\t\t\t\t<div className=\"ui mini pink circular label\">{gpresence}</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{gpresence === 'BREAK' && (\n\t\t\t\t\t\t\t<div className=\"ui mini orange circular label\">{gpresence}</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{gpresence === 'MEAL' && (\n\t\t\t\t\t\t\t<div className=\"ui mini orange circular label\">{gpresence}</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{gpresence === 'MEETING' && (\n\t\t\t\t\t\t\t<div className=\"ui mini red circular label\">{gpresence}</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{gpresence === 'TRAINING' && (\n\t\t\t\t\t\t\t<div className=\"ui mini orange circular label\">{gpresence}</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</a>\n\t\t\t\t\t<a className=\"item\">\n\t\t\t\t\t\t<div className=\"ui large green horizontal label\">Info2 </div>\n\t\t\t\t\t\t{gisconnected === true && (\n\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tid=\"newparticipant\"\n\t\t\t\t\t\t\t\tplaceholder=\"3172222222\"\n\t\t\t\t\t\t\t\tref={refparticipantnumber}\n\t\t\t\t\t\t\t\tval={valparticipantnumber}\n\t\t\t\t\t\t\t\tonChange={handleChange2}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{gisconnected === true && (\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tinverted\n\t\t\t\t\t\t\t\tcolor=\"purple\"\n\t\t\t\t\t\t\t\tid=\"Consult\"\n\t\t\t\t\t\t\t\tonClick={() => setisConsult('on')}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tConsult\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{valparticipantnumber}\n\n\t\t\t\t\t\t{gisconnected === true && isConsult === 'on' && (\n\t\t\t\t\t\t\t<Button inverted color=\"purple\" onClick=\"consultSpeakTo('BOTH')\">\n\t\t\t\t\t\t\t\tBoth\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{gisconnected === true && isConsult === 'on' && (\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tinverted\n\t\t\t\t\t\t\t\tcolor=\"purple\"\n\t\t\t\t\t\t\t\tonClick=\"consultSpeakTo('DESTINATION')\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tDestination\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{gisconnected === true && isConsult === 'on' && (\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tinverted\n\t\t\t\t\t\t\t\tcolor=\"purple\"\n\t\t\t\t\t\t\t\tonClick=\"consultSpeakTo('OBJECT')\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tFirst Party\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{gisconnected === true && isConsult === 'on' && (\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tinverted\n\t\t\t\t\t\t\t\tcolor=\"purple\"\n\t\t\t\t\t\t\t\tonClick={() => setisConsult('off')}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tConsult off\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default App;\n\n/*\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {};\n\n\t\t// Setup\n\t\tconst client = platformClient.ApiClient.instance;\n\t\tconst usersApi = new platformClient.UsersApi();\n\t\tclient.setPersistSettings(true, 'custom_app');\n\t\t// client.setDebugLog(console.log, 25);\n\t\tconst redirectUri = 'http://localhost:3000/';\n\t\t//const clientId = 'babbc081-0761-4f16-8f56-071aa402ebcb';\n\t\tconst clientId = 'd03eb90b-4753-4144-be08-da2890cfa679'; //ama_implicit トークンの暗黙的な付与（ブラウザー\n\t\tconst localState = new Date().getTime();\n\t\tconsole.log(`state=${localState}`);\n\t\t// Set Genesys Cloud settings\n\t\tclient.setEnvironment('mypurecloud.jp');\n\t\tclient.setPersistSettings(true, 'test_app');\n\n\t\t// Connect\n\t\tclient\n\t\t\t.loginImplicitGrant(clientId, redirectUri, { state: localState })\n\t\t\t.then((res) => {\n\t\t\t\tconsole.log('logged in');\n\t\t\t\tconsole.log(res);\n\t\t\t\tconsole.log(\n\t\t\t\t\tres.state === localState\n\t\t\t\t\t\t? 'State match'\n\t\t\t\t\t\t: `Different state: ${res.state}`\n\t\t\t\t);\n\n\t\t\t\t// Get logged in user's info\n\t\t\t\treturn usersApi.getUsersMe();\n\t\t\t})\n\t\t\t.then((res) => {\n\t\t\t\tthis.setState({ name: res.name });\n\t\t\t\tconsole.log(res);\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\t// Handle failure response\n\t\t\t\tconsole.log(err);\n\t\t\t});\n\t}\n\n\trender() {\n\t\tconsole.log(platformClient);\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<header className=\"App-header\">\n\t\t\t\t\t<img src={logo} className=\"App-logo\" alt=\"logo\" />\n\t\t\t\t\t<h1 className=\"App-title\">Welcome to React {this.state.name}</h1>\n\t\t\t\t</header>\n\t\t\t\t<p className=\"App-intro\">\n\t\t\t\t\tTo get started, edit <code>src/App.js</code> and save to reload.\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t);\n\t}\n}\n*/\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}